// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Login should render the Login page correctly 1`] = `
<WithStyles(ForwardRef(Grid))
  alignItems="center"
  classes={
    Object {
      "root": "makeStyles-root-2",
    }
  }
  container={true}
  direction="row"
  justify="center"
>
  <ForwardRef(Grid)
    alignItems="center"
    classes={
      Object {
        "align-content-xs-center": "MuiGrid-align-content-xs-center",
        "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
        "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
        "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
        "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
        "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
        "align-items-xs-center": "MuiGrid-align-items-xs-center",
        "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
        "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
        "container": "MuiGrid-container",
        "direction-xs-column": "MuiGrid-direction-xs-column",
        "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
        "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
        "grid-lg-1": "MuiGrid-grid-lg-1",
        "grid-lg-10": "MuiGrid-grid-lg-10",
        "grid-lg-11": "MuiGrid-grid-lg-11",
        "grid-lg-12": "MuiGrid-grid-lg-12",
        "grid-lg-2": "MuiGrid-grid-lg-2",
        "grid-lg-3": "MuiGrid-grid-lg-3",
        "grid-lg-4": "MuiGrid-grid-lg-4",
        "grid-lg-5": "MuiGrid-grid-lg-5",
        "grid-lg-6": "MuiGrid-grid-lg-6",
        "grid-lg-7": "MuiGrid-grid-lg-7",
        "grid-lg-8": "MuiGrid-grid-lg-8",
        "grid-lg-9": "MuiGrid-grid-lg-9",
        "grid-lg-auto": "MuiGrid-grid-lg-auto",
        "grid-lg-true": "MuiGrid-grid-lg-true",
        "grid-md-1": "MuiGrid-grid-md-1",
        "grid-md-10": "MuiGrid-grid-md-10",
        "grid-md-11": "MuiGrid-grid-md-11",
        "grid-md-12": "MuiGrid-grid-md-12",
        "grid-md-2": "MuiGrid-grid-md-2",
        "grid-md-3": "MuiGrid-grid-md-3",
        "grid-md-4": "MuiGrid-grid-md-4",
        "grid-md-5": "MuiGrid-grid-md-5",
        "grid-md-6": "MuiGrid-grid-md-6",
        "grid-md-7": "MuiGrid-grid-md-7",
        "grid-md-8": "MuiGrid-grid-md-8",
        "grid-md-9": "MuiGrid-grid-md-9",
        "grid-md-auto": "MuiGrid-grid-md-auto",
        "grid-md-true": "MuiGrid-grid-md-true",
        "grid-sm-1": "MuiGrid-grid-sm-1",
        "grid-sm-10": "MuiGrid-grid-sm-10",
        "grid-sm-11": "MuiGrid-grid-sm-11",
        "grid-sm-12": "MuiGrid-grid-sm-12",
        "grid-sm-2": "MuiGrid-grid-sm-2",
        "grid-sm-3": "MuiGrid-grid-sm-3",
        "grid-sm-4": "MuiGrid-grid-sm-4",
        "grid-sm-5": "MuiGrid-grid-sm-5",
        "grid-sm-6": "MuiGrid-grid-sm-6",
        "grid-sm-7": "MuiGrid-grid-sm-7",
        "grid-sm-8": "MuiGrid-grid-sm-8",
        "grid-sm-9": "MuiGrid-grid-sm-9",
        "grid-sm-auto": "MuiGrid-grid-sm-auto",
        "grid-sm-true": "MuiGrid-grid-sm-true",
        "grid-xl-1": "MuiGrid-grid-xl-1",
        "grid-xl-10": "MuiGrid-grid-xl-10",
        "grid-xl-11": "MuiGrid-grid-xl-11",
        "grid-xl-12": "MuiGrid-grid-xl-12",
        "grid-xl-2": "MuiGrid-grid-xl-2",
        "grid-xl-3": "MuiGrid-grid-xl-3",
        "grid-xl-4": "MuiGrid-grid-xl-4",
        "grid-xl-5": "MuiGrid-grid-xl-5",
        "grid-xl-6": "MuiGrid-grid-xl-6",
        "grid-xl-7": "MuiGrid-grid-xl-7",
        "grid-xl-8": "MuiGrid-grid-xl-8",
        "grid-xl-9": "MuiGrid-grid-xl-9",
        "grid-xl-auto": "MuiGrid-grid-xl-auto",
        "grid-xl-true": "MuiGrid-grid-xl-true",
        "grid-xs-1": "MuiGrid-grid-xs-1",
        "grid-xs-10": "MuiGrid-grid-xs-10",
        "grid-xs-11": "MuiGrid-grid-xs-11",
        "grid-xs-12": "MuiGrid-grid-xs-12",
        "grid-xs-2": "MuiGrid-grid-xs-2",
        "grid-xs-3": "MuiGrid-grid-xs-3",
        "grid-xs-4": "MuiGrid-grid-xs-4",
        "grid-xs-5": "MuiGrid-grid-xs-5",
        "grid-xs-6": "MuiGrid-grid-xs-6",
        "grid-xs-7": "MuiGrid-grid-xs-7",
        "grid-xs-8": "MuiGrid-grid-xs-8",
        "grid-xs-9": "MuiGrid-grid-xs-9",
        "grid-xs-auto": "MuiGrid-grid-xs-auto",
        "grid-xs-true": "MuiGrid-grid-xs-true",
        "item": "MuiGrid-item",
        "justify-xs-center": "MuiGrid-justify-xs-center",
        "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
        "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
        "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
        "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
        "root": "MuiGrid-root makeStyles-root-2",
        "spacing-xs-1": "MuiGrid-spacing-xs-1",
        "spacing-xs-10": "MuiGrid-spacing-xs-10",
        "spacing-xs-2": "MuiGrid-spacing-xs-2",
        "spacing-xs-3": "MuiGrid-spacing-xs-3",
        "spacing-xs-4": "MuiGrid-spacing-xs-4",
        "spacing-xs-5": "MuiGrid-spacing-xs-5",
        "spacing-xs-6": "MuiGrid-spacing-xs-6",
        "spacing-xs-7": "MuiGrid-spacing-xs-7",
        "spacing-xs-8": "MuiGrid-spacing-xs-8",
        "spacing-xs-9": "MuiGrid-spacing-xs-9",
        "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
        "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
        "zeroMinWidth": "MuiGrid-zeroMinWidth",
      }
    }
    container={true}
    direction="row"
    justify="center"
  >
    <div
      className="MuiGrid-root makeStyles-root-2 MuiGrid-container MuiGrid-align-items-xs-center MuiGrid-justify-xs-center"
    >
      <WithStyles(ForwardRef(Grid))
        classes={
          Object {
            "root": "makeStyles-container-3",
          }
        }
        item={true}
        sm={6}
        xs={12}
      >
        <ForwardRef(Grid)
          classes={
            Object {
              "align-content-xs-center": "MuiGrid-align-content-xs-center",
              "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
              "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
              "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
              "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
              "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
              "align-items-xs-center": "MuiGrid-align-items-xs-center",
              "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
              "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
              "container": "MuiGrid-container",
              "direction-xs-column": "MuiGrid-direction-xs-column",
              "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
              "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
              "grid-lg-1": "MuiGrid-grid-lg-1",
              "grid-lg-10": "MuiGrid-grid-lg-10",
              "grid-lg-11": "MuiGrid-grid-lg-11",
              "grid-lg-12": "MuiGrid-grid-lg-12",
              "grid-lg-2": "MuiGrid-grid-lg-2",
              "grid-lg-3": "MuiGrid-grid-lg-3",
              "grid-lg-4": "MuiGrid-grid-lg-4",
              "grid-lg-5": "MuiGrid-grid-lg-5",
              "grid-lg-6": "MuiGrid-grid-lg-6",
              "grid-lg-7": "MuiGrid-grid-lg-7",
              "grid-lg-8": "MuiGrid-grid-lg-8",
              "grid-lg-9": "MuiGrid-grid-lg-9",
              "grid-lg-auto": "MuiGrid-grid-lg-auto",
              "grid-lg-true": "MuiGrid-grid-lg-true",
              "grid-md-1": "MuiGrid-grid-md-1",
              "grid-md-10": "MuiGrid-grid-md-10",
              "grid-md-11": "MuiGrid-grid-md-11",
              "grid-md-12": "MuiGrid-grid-md-12",
              "grid-md-2": "MuiGrid-grid-md-2",
              "grid-md-3": "MuiGrid-grid-md-3",
              "grid-md-4": "MuiGrid-grid-md-4",
              "grid-md-5": "MuiGrid-grid-md-5",
              "grid-md-6": "MuiGrid-grid-md-6",
              "grid-md-7": "MuiGrid-grid-md-7",
              "grid-md-8": "MuiGrid-grid-md-8",
              "grid-md-9": "MuiGrid-grid-md-9",
              "grid-md-auto": "MuiGrid-grid-md-auto",
              "grid-md-true": "MuiGrid-grid-md-true",
              "grid-sm-1": "MuiGrid-grid-sm-1",
              "grid-sm-10": "MuiGrid-grid-sm-10",
              "grid-sm-11": "MuiGrid-grid-sm-11",
              "grid-sm-12": "MuiGrid-grid-sm-12",
              "grid-sm-2": "MuiGrid-grid-sm-2",
              "grid-sm-3": "MuiGrid-grid-sm-3",
              "grid-sm-4": "MuiGrid-grid-sm-4",
              "grid-sm-5": "MuiGrid-grid-sm-5",
              "grid-sm-6": "MuiGrid-grid-sm-6",
              "grid-sm-7": "MuiGrid-grid-sm-7",
              "grid-sm-8": "MuiGrid-grid-sm-8",
              "grid-sm-9": "MuiGrid-grid-sm-9",
              "grid-sm-auto": "MuiGrid-grid-sm-auto",
              "grid-sm-true": "MuiGrid-grid-sm-true",
              "grid-xl-1": "MuiGrid-grid-xl-1",
              "grid-xl-10": "MuiGrid-grid-xl-10",
              "grid-xl-11": "MuiGrid-grid-xl-11",
              "grid-xl-12": "MuiGrid-grid-xl-12",
              "grid-xl-2": "MuiGrid-grid-xl-2",
              "grid-xl-3": "MuiGrid-grid-xl-3",
              "grid-xl-4": "MuiGrid-grid-xl-4",
              "grid-xl-5": "MuiGrid-grid-xl-5",
              "grid-xl-6": "MuiGrid-grid-xl-6",
              "grid-xl-7": "MuiGrid-grid-xl-7",
              "grid-xl-8": "MuiGrid-grid-xl-8",
              "grid-xl-9": "MuiGrid-grid-xl-9",
              "grid-xl-auto": "MuiGrid-grid-xl-auto",
              "grid-xl-true": "MuiGrid-grid-xl-true",
              "grid-xs-1": "MuiGrid-grid-xs-1",
              "grid-xs-10": "MuiGrid-grid-xs-10",
              "grid-xs-11": "MuiGrid-grid-xs-11",
              "grid-xs-12": "MuiGrid-grid-xs-12",
              "grid-xs-2": "MuiGrid-grid-xs-2",
              "grid-xs-3": "MuiGrid-grid-xs-3",
              "grid-xs-4": "MuiGrid-grid-xs-4",
              "grid-xs-5": "MuiGrid-grid-xs-5",
              "grid-xs-6": "MuiGrid-grid-xs-6",
              "grid-xs-7": "MuiGrid-grid-xs-7",
              "grid-xs-8": "MuiGrid-grid-xs-8",
              "grid-xs-9": "MuiGrid-grid-xs-9",
              "grid-xs-auto": "MuiGrid-grid-xs-auto",
              "grid-xs-true": "MuiGrid-grid-xs-true",
              "item": "MuiGrid-item",
              "justify-xs-center": "MuiGrid-justify-xs-center",
              "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
              "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
              "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
              "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
              "root": "MuiGrid-root makeStyles-container-3",
              "spacing-xs-1": "MuiGrid-spacing-xs-1",
              "spacing-xs-10": "MuiGrid-spacing-xs-10",
              "spacing-xs-2": "MuiGrid-spacing-xs-2",
              "spacing-xs-3": "MuiGrid-spacing-xs-3",
              "spacing-xs-4": "MuiGrid-spacing-xs-4",
              "spacing-xs-5": "MuiGrid-spacing-xs-5",
              "spacing-xs-6": "MuiGrid-spacing-xs-6",
              "spacing-xs-7": "MuiGrid-spacing-xs-7",
              "spacing-xs-8": "MuiGrid-spacing-xs-8",
              "spacing-xs-9": "MuiGrid-spacing-xs-9",
              "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
              "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
              "zeroMinWidth": "MuiGrid-zeroMinWidth",
            }
          }
          item={true}
          sm={6}
          xs={12}
        >
          <div
            className="MuiGrid-root makeStyles-container-3 MuiGrid-item MuiGrid-grid-xs-12 MuiGrid-grid-sm-6"
          >
            <WithStyles(ForwardRef(Container))
              classes={
                Object {
                  "root": "makeStyles-img-7",
                }
              }
              maxWidth="xs"
            >
              <ForwardRef(Container)
                classes={
                  Object {
                    "disableGutters": "MuiContainer-disableGutters",
                    "fixed": "MuiContainer-fixed",
                    "maxWidthLg": "MuiContainer-maxWidthLg",
                    "maxWidthMd": "MuiContainer-maxWidthMd",
                    "maxWidthSm": "MuiContainer-maxWidthSm",
                    "maxWidthXl": "MuiContainer-maxWidthXl",
                    "maxWidthXs": "MuiContainer-maxWidthXs",
                    "root": "MuiContainer-root makeStyles-img-7",
                  }
                }
                maxWidth="xs"
              >
                <div
                  className="MuiContainer-root makeStyles-img-7 MuiContainer-maxWidthXs"
                >
                  <styled.img
                    src="o-boticario-logo.png"
                  >
                    <img
                      className="sc-AxjAm hZfDqG"
                      src="o-boticario-logo.png"
                    />
                  </styled.img>
                </div>
              </ForwardRef(Container)>
            </WithStyles(ForwardRef(Container))>
            <WithStyles(ForwardRef(Container))
              className="makeStyles-paper-4"
              maxWidth="xs"
            >
              <ForwardRef(Container)
                className="makeStyles-paper-4"
                classes={
                  Object {
                    "disableGutters": "MuiContainer-disableGutters",
                    "fixed": "MuiContainer-fixed",
                    "maxWidthLg": "MuiContainer-maxWidthLg",
                    "maxWidthMd": "MuiContainer-maxWidthMd",
                    "maxWidthSm": "MuiContainer-maxWidthSm",
                    "maxWidthXl": "MuiContainer-maxWidthXl",
                    "maxWidthXs": "MuiContainer-maxWidthXs",
                    "root": "MuiContainer-root",
                  }
                }
                maxWidth="xs"
              >
                <div
                  className="MuiContainer-root makeStyles-paper-4 MuiContainer-maxWidthXs"
                >
                  <WithStyles(ForwardRef(Avatar))
                    className="makeStyles-avatar-5"
                  >
                    <ForwardRef(Avatar)
                      className="makeStyles-avatar-5"
                      classes={
                        Object {
                          "circle": "MuiAvatar-circle",
                          "colorDefault": "MuiAvatar-colorDefault",
                          "fallback": "MuiAvatar-fallback",
                          "img": "MuiAvatar-img",
                          "root": "MuiAvatar-root",
                          "rounded": "MuiAvatar-rounded",
                          "square": "MuiAvatar-square",
                        }
                      }
                    >
                      <div
                        className="MuiAvatar-root MuiAvatar-circle makeStyles-avatar-5 MuiAvatar-colorDefault"
                      >
                        <ForwardRef
                          className="MuiAvatar-fallback"
                        >
                          <WithStyles(ForwardRef(SvgIcon))
                            className="MuiAvatar-fallback"
                          >
                            <ForwardRef(SvgIcon)
                              className="MuiAvatar-fallback"
                              classes={
                                Object {
                                  "colorAction": "MuiSvgIcon-colorAction",
                                  "colorDisabled": "MuiSvgIcon-colorDisabled",
                                  "colorError": "MuiSvgIcon-colorError",
                                  "colorPrimary": "MuiSvgIcon-colorPrimary",
                                  "colorSecondary": "MuiSvgIcon-colorSecondary",
                                  "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                  "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                  "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                  "root": "MuiSvgIcon-root",
                                }
                              }
                            >
                              <svg
                                aria-hidden={true}
                                className="MuiSvgIcon-root MuiAvatar-fallback"
                                focusable="false"
                                viewBox="0 0 24 24"
                              >
                                <path
                                  d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
                                />
                              </svg>
                            </ForwardRef(SvgIcon)>
                          </WithStyles(ForwardRef(SvgIcon))>
                        </ForwardRef>
                      </div>
                    </ForwardRef(Avatar)>
                  </WithStyles(ForwardRef(Avatar))>
                  <WithStyles(ForwardRef(Typography))
                    component="h1"
                    variant="h5"
                  >
                    <ForwardRef(Typography)
                      classes={
                        Object {
                          "alignCenter": "MuiTypography-alignCenter",
                          "alignJustify": "MuiTypography-alignJustify",
                          "alignLeft": "MuiTypography-alignLeft",
                          "alignRight": "MuiTypography-alignRight",
                          "body1": "MuiTypography-body1",
                          "body2": "MuiTypography-body2",
                          "button": "MuiTypography-button",
                          "caption": "MuiTypography-caption",
                          "colorError": "MuiTypography-colorError",
                          "colorInherit": "MuiTypography-colorInherit",
                          "colorPrimary": "MuiTypography-colorPrimary",
                          "colorSecondary": "MuiTypography-colorSecondary",
                          "colorTextPrimary": "MuiTypography-colorTextPrimary",
                          "colorTextSecondary": "MuiTypography-colorTextSecondary",
                          "displayBlock": "MuiTypography-displayBlock",
                          "displayInline": "MuiTypography-displayInline",
                          "gutterBottom": "MuiTypography-gutterBottom",
                          "h1": "MuiTypography-h1",
                          "h2": "MuiTypography-h2",
                          "h3": "MuiTypography-h3",
                          "h4": "MuiTypography-h4",
                          "h5": "MuiTypography-h5",
                          "h6": "MuiTypography-h6",
                          "noWrap": "MuiTypography-noWrap",
                          "overline": "MuiTypography-overline",
                          "paragraph": "MuiTypography-paragraph",
                          "root": "MuiTypography-root",
                          "srOnly": "MuiTypography-srOnly",
                          "subtitle1": "MuiTypography-subtitle1",
                          "subtitle2": "MuiTypography-subtitle2",
                        }
                      }
                      component="h1"
                      variant="h5"
                    >
                      <h1
                        className="MuiTypography-root MuiTypography-h5"
                      >
                        Eu revendedor
                      </h1>
                    </ForwardRef(Typography)>
                  </WithStyles(ForwardRef(Typography))>
                  <form
                    className="makeStyles-form-6"
                    noValidate={true}
                    onSubmit={[Function]}
                  >
                    <WithStyles(ForwardRef(TextField))
                      autoComplete="email"
                      autoFocus={true}
                      color="secondary"
                      data-test="email"
                      fullWidth={true}
                      id="email"
                      label="Email"
                      margin="normal"
                      name="email"
                      onChange={[Function]}
                      required={true}
                      value=""
                    >
                      <ForwardRef(TextField)
                        autoComplete="email"
                        autoFocus={true}
                        classes={
                          Object {
                            "root": "MuiTextField-root",
                          }
                        }
                        color="secondary"
                        data-test="email"
                        fullWidth={true}
                        id="email"
                        label="Email"
                        margin="normal"
                        name="email"
                        onChange={[Function]}
                        required={true}
                        value=""
                      >
                        <WithStyles(ForwardRef(FormControl))
                          className="MuiTextField-root"
                          color="secondary"
                          data-test="email"
                          disabled={false}
                          error={false}
                          fullWidth={true}
                          margin="normal"
                          required={true}
                          variant="standard"
                        >
                          <ForwardRef(FormControl)
                            className="MuiTextField-root"
                            classes={
                              Object {
                                "fullWidth": "MuiFormControl-fullWidth",
                                "marginDense": "MuiFormControl-marginDense",
                                "marginNormal": "MuiFormControl-marginNormal",
                                "root": "MuiFormControl-root",
                              }
                            }
                            color="secondary"
                            data-test="email"
                            disabled={false}
                            error={false}
                            fullWidth={true}
                            margin="normal"
                            required={true}
                            variant="standard"
                          >
                            <div
                              className="MuiFormControl-root MuiTextField-root MuiFormControl-marginNormal MuiFormControl-fullWidth"
                              data-test="email"
                            >
                              <WithStyles(ForwardRef(InputLabel))
                                htmlFor="email"
                                id="email-label"
                              >
                                <ForwardRef(InputLabel)
                                  classes={
                                    Object {
                                      "animated": "MuiInputLabel-animated",
                                      "asterisk": "MuiInputLabel-asterisk",
                                      "disabled": "Mui-disabled",
                                      "error": "Mui-error",
                                      "filled": "MuiInputLabel-filled",
                                      "focused": "Mui-focused",
                                      "formControl": "MuiInputLabel-formControl",
                                      "marginDense": "MuiInputLabel-marginDense",
                                      "outlined": "MuiInputLabel-outlined",
                                      "required": "Mui-required",
                                      "root": "MuiInputLabel-root",
                                      "shrink": "MuiInputLabel-shrink",
                                    }
                                  }
                                  htmlFor="email"
                                  id="email-label"
                                >
                                  <WithStyles(ForwardRef(FormLabel))
                                    className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                    classes={
                                      Object {
                                        "asterisk": "MuiInputLabel-asterisk",
                                        "disabled": "Mui-disabled",
                                        "error": "Mui-error",
                                        "focused": "Mui-focused",
                                        "required": "Mui-required",
                                      }
                                    }
                                    data-shrink={false}
                                    htmlFor="email"
                                    id="email-label"
                                  >
                                    <ForwardRef(FormLabel)
                                      className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                      classes={
                                        Object {
                                          "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                          "colorSecondary": "MuiFormLabel-colorSecondary",
                                          "disabled": "Mui-disabled Mui-disabled",
                                          "error": "Mui-error Mui-error",
                                          "filled": "MuiFormLabel-filled",
                                          "focused": "Mui-focused Mui-focused",
                                          "required": "Mui-required Mui-required",
                                          "root": "MuiFormLabel-root",
                                        }
                                      }
                                      data-shrink={false}
                                      htmlFor="email"
                                      id="email-label"
                                    >
                                      <label
                                        className="MuiFormLabel-root MuiFormLabel-colorSecondary MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated Mui-required Mui-required"
                                        data-shrink={false}
                                        htmlFor="email"
                                        id="email-label"
                                      >
                                        Email
                                        <span
                                          aria-hidden={true}
                                          className="MuiFormLabel-asterisk MuiInputLabel-asterisk"
                                        >
                                           
                                          *
                                        </span>
                                      </label>
                                    </ForwardRef(FormLabel)>
                                  </WithStyles(ForwardRef(FormLabel))>
                                </ForwardRef(InputLabel)>
                              </WithStyles(ForwardRef(InputLabel))>
                              <WithStyles(ForwardRef(Input))
                                autoComplete="email"
                                autoFocus={true}
                                fullWidth={true}
                                id="email"
                                multiline={false}
                                name="email"
                                onChange={[Function]}
                                value=""
                              >
                                <ForwardRef(Input)
                                  autoComplete="email"
                                  autoFocus={true}
                                  classes={
                                    Object {
                                      "colorSecondary": "MuiInput-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "error": "Mui-error",
                                      "focused": "Mui-focused",
                                      "formControl": "MuiInput-formControl",
                                      "fullWidth": "MuiInput-fullWidth",
                                      "input": "MuiInput-input",
                                      "inputMarginDense": "MuiInput-inputMarginDense",
                                      "inputMultiline": "MuiInput-inputMultiline",
                                      "inputTypeSearch": "MuiInput-inputTypeSearch",
                                      "marginDense": "MuiInput-marginDense",
                                      "multiline": "MuiInput-multiline",
                                      "root": "MuiInput-root",
                                      "underline": "MuiInput-underline",
                                    }
                                  }
                                  fullWidth={true}
                                  id="email"
                                  multiline={false}
                                  name="email"
                                  onChange={[Function]}
                                  value=""
                                >
                                  <WithStyles(ForwardRef(InputBase))
                                    autoComplete="email"
                                    autoFocus={true}
                                    classes={
                                      Object {
                                        "colorSecondary": "MuiInput-colorSecondary",
                                        "disabled": "Mui-disabled",
                                        "error": "Mui-error",
                                        "focused": "Mui-focused",
                                        "formControl": "MuiInput-formControl",
                                        "fullWidth": "MuiInput-fullWidth",
                                        "input": "MuiInput-input",
                                        "inputMarginDense": "MuiInput-inputMarginDense",
                                        "inputMultiline": "MuiInput-inputMultiline",
                                        "inputTypeSearch": "MuiInput-inputTypeSearch",
                                        "marginDense": "MuiInput-marginDense",
                                        "multiline": "MuiInput-multiline",
                                        "root": "MuiInput-root MuiInput-underline",
                                        "underline": null,
                                      }
                                    }
                                    fullWidth={true}
                                    id="email"
                                    inputComponent="input"
                                    multiline={false}
                                    name="email"
                                    onChange={[Function]}
                                    type="text"
                                    value=""
                                  >
                                    <ForwardRef(InputBase)
                                      autoComplete="email"
                                      autoFocus={true}
                                      classes={
                                        Object {
                                          "adornedEnd": "MuiInputBase-adornedEnd",
                                          "adornedStart": "MuiInputBase-adornedStart",
                                          "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                          "disabled": "Mui-disabled Mui-disabled",
                                          "error": "Mui-error Mui-error",
                                          "focused": "Mui-focused Mui-focused",
                                          "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                          "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                          "input": "MuiInputBase-input MuiInput-input",
                                          "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                          "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                          "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                          "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                          "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                          "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                          "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                          "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                          "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                                        }
                                      }
                                      fullWidth={true}
                                      id="email"
                                      inputComponent="input"
                                      multiline={false}
                                      name="email"
                                      onChange={[Function]}
                                      type="text"
                                      value=""
                                    >
                                      <div
                                        className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-colorSecondary MuiInput-colorSecondary MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl"
                                        onClick={[Function]}
                                      >
                                        <input
                                          aria-invalid={false}
                                          autoComplete="email"
                                          autoFocus={true}
                                          className="MuiInputBase-input MuiInput-input"
                                          disabled={false}
                                          id="email"
                                          name="email"
                                          onAnimationStart={[Function]}
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          required={true}
                                          type="text"
                                          value=""
                                        />
                                      </div>
                                    </ForwardRef(InputBase)>
                                  </WithStyles(ForwardRef(InputBase))>
                                </ForwardRef(Input)>
                              </WithStyles(ForwardRef(Input))>
                            </div>
                          </ForwardRef(FormControl)>
                        </WithStyles(ForwardRef(FormControl))>
                      </ForwardRef(TextField)>
                    </WithStyles(ForwardRef(TextField))>
                    <WithStyles(ForwardRef(TextField))
                      InputProps={
                        Object {
                          "endAdornment": <ForwardRef(WithStyles)
                            position="end"
                          >
                            <ForwardRef(WithStyles)
                              aria-label="toggle password visibility"
                              data-test="visibility-icon"
                              edge="end"
                              onClick={[Function]}
                              onMouseDown={[Function]}
                            >
                              <UNDEFINED />
                            </ForwardRef(WithStyles)>
                          </ForwardRef(WithStyles)>,
                        }
                      }
                      autoComplete="current-password"
                      data-test="password"
                      fullWidth={true}
                      id="password"
                      label="Senha"
                      margin="normal"
                      name="password"
                      onChange={[Function]}
                      required={true}
                      type="password"
                      value=""
                    >
                      <ForwardRef(TextField)
                        InputProps={
                          Object {
                            "endAdornment": <ForwardRef(WithStyles)
                              position="end"
                            >
                              <ForwardRef(WithStyles)
                                aria-label="toggle password visibility"
                                data-test="visibility-icon"
                                edge="end"
                                onClick={[Function]}
                                onMouseDown={[Function]}
                              >
                                <UNDEFINED />
                              </ForwardRef(WithStyles)>
                            </ForwardRef(WithStyles)>,
                          }
                        }
                        autoComplete="current-password"
                        classes={
                          Object {
                            "root": "MuiTextField-root",
                          }
                        }
                        data-test="password"
                        fullWidth={true}
                        id="password"
                        label="Senha"
                        margin="normal"
                        name="password"
                        onChange={[Function]}
                        required={true}
                        type="password"
                        value=""
                      >
                        <WithStyles(ForwardRef(FormControl))
                          className="MuiTextField-root"
                          color="primary"
                          data-test="password"
                          disabled={false}
                          error={false}
                          fullWidth={true}
                          margin="normal"
                          required={true}
                          variant="standard"
                        >
                          <ForwardRef(FormControl)
                            className="MuiTextField-root"
                            classes={
                              Object {
                                "fullWidth": "MuiFormControl-fullWidth",
                                "marginDense": "MuiFormControl-marginDense",
                                "marginNormal": "MuiFormControl-marginNormal",
                                "root": "MuiFormControl-root",
                              }
                            }
                            color="primary"
                            data-test="password"
                            disabled={false}
                            error={false}
                            fullWidth={true}
                            margin="normal"
                            required={true}
                            variant="standard"
                          >
                            <div
                              className="MuiFormControl-root MuiTextField-root MuiFormControl-marginNormal MuiFormControl-fullWidth"
                              data-test="password"
                            >
                              <WithStyles(ForwardRef(InputLabel))
                                htmlFor="password"
                                id="password-label"
                              >
                                <ForwardRef(InputLabel)
                                  classes={
                                    Object {
                                      "animated": "MuiInputLabel-animated",
                                      "asterisk": "MuiInputLabel-asterisk",
                                      "disabled": "Mui-disabled",
                                      "error": "Mui-error",
                                      "filled": "MuiInputLabel-filled",
                                      "focused": "Mui-focused",
                                      "formControl": "MuiInputLabel-formControl",
                                      "marginDense": "MuiInputLabel-marginDense",
                                      "outlined": "MuiInputLabel-outlined",
                                      "required": "Mui-required",
                                      "root": "MuiInputLabel-root",
                                      "shrink": "MuiInputLabel-shrink",
                                    }
                                  }
                                  htmlFor="password"
                                  id="password-label"
                                >
                                  <WithStyles(ForwardRef(FormLabel))
                                    className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                    classes={
                                      Object {
                                        "asterisk": "MuiInputLabel-asterisk",
                                        "disabled": "Mui-disabled",
                                        "error": "Mui-error",
                                        "focused": "Mui-focused",
                                        "required": "Mui-required",
                                      }
                                    }
                                    data-shrink={false}
                                    htmlFor="password"
                                    id="password-label"
                                  >
                                    <ForwardRef(FormLabel)
                                      className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                                      classes={
                                        Object {
                                          "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                          "colorSecondary": "MuiFormLabel-colorSecondary",
                                          "disabled": "Mui-disabled Mui-disabled",
                                          "error": "Mui-error Mui-error",
                                          "filled": "MuiFormLabel-filled",
                                          "focused": "Mui-focused Mui-focused",
                                          "required": "Mui-required Mui-required",
                                          "root": "MuiFormLabel-root",
                                        }
                                      }
                                      data-shrink={false}
                                      htmlFor="password"
                                      id="password-label"
                                    >
                                      <label
                                        className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated Mui-required Mui-required"
                                        data-shrink={false}
                                        htmlFor="password"
                                        id="password-label"
                                      >
                                        Senha
                                        <span
                                          aria-hidden={true}
                                          className="MuiFormLabel-asterisk MuiInputLabel-asterisk"
                                        >
                                           
                                          *
                                        </span>
                                      </label>
                                    </ForwardRef(FormLabel)>
                                  </WithStyles(ForwardRef(FormLabel))>
                                </ForwardRef(InputLabel)>
                              </WithStyles(ForwardRef(InputLabel))>
                              <WithStyles(ForwardRef(Input))
                                autoComplete="current-password"
                                autoFocus={false}
                                endAdornment={
                                  <ForwardRef(WithStyles)
                                    position="end"
                                  >
                                    <ForwardRef(WithStyles)
                                      aria-label="toggle password visibility"
                                      data-test="visibility-icon"
                                      edge="end"
                                      onClick={[Function]}
                                      onMouseDown={[Function]}
                                    >
                                      <UNDEFINED />
                                    </ForwardRef(WithStyles)>
                                  </ForwardRef(WithStyles)>
                                }
                                fullWidth={true}
                                id="password"
                                multiline={false}
                                name="password"
                                onChange={[Function]}
                                type="password"
                                value=""
                              >
                                <ForwardRef(Input)
                                  autoComplete="current-password"
                                  autoFocus={false}
                                  classes={
                                    Object {
                                      "colorSecondary": "MuiInput-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "error": "Mui-error",
                                      "focused": "Mui-focused",
                                      "formControl": "MuiInput-formControl",
                                      "fullWidth": "MuiInput-fullWidth",
                                      "input": "MuiInput-input",
                                      "inputMarginDense": "MuiInput-inputMarginDense",
                                      "inputMultiline": "MuiInput-inputMultiline",
                                      "inputTypeSearch": "MuiInput-inputTypeSearch",
                                      "marginDense": "MuiInput-marginDense",
                                      "multiline": "MuiInput-multiline",
                                      "root": "MuiInput-root",
                                      "underline": "MuiInput-underline",
                                    }
                                  }
                                  endAdornment={
                                    <ForwardRef(WithStyles)
                                      position="end"
                                    >
                                      <ForwardRef(WithStyles)
                                        aria-label="toggle password visibility"
                                        data-test="visibility-icon"
                                        edge="end"
                                        onClick={[Function]}
                                        onMouseDown={[Function]}
                                      >
                                        <UNDEFINED />
                                      </ForwardRef(WithStyles)>
                                    </ForwardRef(WithStyles)>
                                  }
                                  fullWidth={true}
                                  id="password"
                                  multiline={false}
                                  name="password"
                                  onChange={[Function]}
                                  type="password"
                                  value=""
                                >
                                  <WithStyles(ForwardRef(InputBase))
                                    autoComplete="current-password"
                                    autoFocus={false}
                                    classes={
                                      Object {
                                        "colorSecondary": "MuiInput-colorSecondary",
                                        "disabled": "Mui-disabled",
                                        "error": "Mui-error",
                                        "focused": "Mui-focused",
                                        "formControl": "MuiInput-formControl",
                                        "fullWidth": "MuiInput-fullWidth",
                                        "input": "MuiInput-input",
                                        "inputMarginDense": "MuiInput-inputMarginDense",
                                        "inputMultiline": "MuiInput-inputMultiline",
                                        "inputTypeSearch": "MuiInput-inputTypeSearch",
                                        "marginDense": "MuiInput-marginDense",
                                        "multiline": "MuiInput-multiline",
                                        "root": "MuiInput-root MuiInput-underline",
                                        "underline": null,
                                      }
                                    }
                                    endAdornment={
                                      <ForwardRef(WithStyles)
                                        position="end"
                                      >
                                        <ForwardRef(WithStyles)
                                          aria-label="toggle password visibility"
                                          data-test="visibility-icon"
                                          edge="end"
                                          onClick={[Function]}
                                          onMouseDown={[Function]}
                                        >
                                          <UNDEFINED />
                                        </ForwardRef(WithStyles)>
                                      </ForwardRef(WithStyles)>
                                    }
                                    fullWidth={true}
                                    id="password"
                                    inputComponent="input"
                                    multiline={false}
                                    name="password"
                                    onChange={[Function]}
                                    type="password"
                                    value=""
                                  >
                                    <ForwardRef(InputBase)
                                      autoComplete="current-password"
                                      autoFocus={false}
                                      classes={
                                        Object {
                                          "adornedEnd": "MuiInputBase-adornedEnd",
                                          "adornedStart": "MuiInputBase-adornedStart",
                                          "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                          "disabled": "Mui-disabled Mui-disabled",
                                          "error": "Mui-error Mui-error",
                                          "focused": "Mui-focused Mui-focused",
                                          "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                          "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                          "input": "MuiInputBase-input MuiInput-input",
                                          "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                          "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                          "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                          "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                          "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                          "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                          "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                          "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                          "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                                        }
                                      }
                                      endAdornment={
                                        <ForwardRef(WithStyles)
                                          position="end"
                                        >
                                          <ForwardRef(WithStyles)
                                            aria-label="toggle password visibility"
                                            data-test="visibility-icon"
                                            edge="end"
                                            onClick={[Function]}
                                            onMouseDown={[Function]}
                                          >
                                            <UNDEFINED />
                                          </ForwardRef(WithStyles)>
                                        </ForwardRef(WithStyles)>
                                      }
                                      fullWidth={true}
                                      id="password"
                                      inputComponent="input"
                                      multiline={false}
                                      name="password"
                                      onChange={[Function]}
                                      type="password"
                                      value=""
                                    >
                                      <div
                                        className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl MuiInputBase-adornedEnd"
                                        onClick={[Function]}
                                      >
                                        <input
                                          aria-invalid={false}
                                          autoComplete="current-password"
                                          autoFocus={false}
                                          className="MuiInputBase-input MuiInput-input MuiInputBase-inputAdornedEnd"
                                          disabled={false}
                                          id="password"
                                          name="password"
                                          onAnimationStart={[Function]}
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          required={true}
                                          type="password"
                                          value=""
                                        />
                                        <WithStyles(ForwardRef(InputAdornment))
                                          position="end"
                                        >
                                          <ForwardRef(InputAdornment)
                                            classes={
                                              Object {
                                                "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                                                "filled": "MuiInputAdornment-filled",
                                                "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                                                "marginDense": "MuiInputAdornment-marginDense",
                                                "positionEnd": "MuiInputAdornment-positionEnd",
                                                "positionStart": "MuiInputAdornment-positionStart",
                                                "root": "MuiInputAdornment-root",
                                              }
                                            }
                                            position="end"
                                          >
                                            <div
                                              className="MuiInputAdornment-root MuiInputAdornment-positionEnd"
                                            >
                                              <WithStyles(ForwardRef(IconButton))
                                                aria-label="toggle password visibility"
                                                data-test="visibility-icon"
                                                edge="end"
                                                onClick={[Function]}
                                                onMouseDown={[Function]}
                                              >
                                                <ForwardRef(IconButton)
                                                  aria-label="toggle password visibility"
                                                  classes={
                                                    Object {
                                                      "colorInherit": "MuiIconButton-colorInherit",
                                                      "colorPrimary": "MuiIconButton-colorPrimary",
                                                      "colorSecondary": "MuiIconButton-colorSecondary",
                                                      "disabled": "Mui-disabled",
                                                      "edgeEnd": "MuiIconButton-edgeEnd",
                                                      "edgeStart": "MuiIconButton-edgeStart",
                                                      "label": "MuiIconButton-label",
                                                      "root": "MuiIconButton-root",
                                                      "sizeSmall": "MuiIconButton-sizeSmall",
                                                    }
                                                  }
                                                  data-test="visibility-icon"
                                                  edge="end"
                                                  onClick={[Function]}
                                                  onMouseDown={[Function]}
                                                >
                                                  <WithStyles(ForwardRef(ButtonBase))
                                                    aria-label="toggle password visibility"
                                                    centerRipple={true}
                                                    className="MuiIconButton-root MuiIconButton-edgeEnd"
                                                    data-test="visibility-icon"
                                                    disabled={false}
                                                    focusRipple={true}
                                                    onClick={[Function]}
                                                    onMouseDown={[Function]}
                                                  >
                                                    <ForwardRef(ButtonBase)
                                                      aria-label="toggle password visibility"
                                                      centerRipple={true}
                                                      className="MuiIconButton-root MuiIconButton-edgeEnd"
                                                      classes={
                                                        Object {
                                                          "disabled": "Mui-disabled",
                                                          "focusVisible": "Mui-focusVisible",
                                                          "root": "MuiButtonBase-root",
                                                        }
                                                      }
                                                      data-test="visibility-icon"
                                                      disabled={false}
                                                      focusRipple={true}
                                                      onClick={[Function]}
                                                      onMouseDown={[Function]}
                                                    >
                                                      <button
                                                        aria-label="toggle password visibility"
                                                        className="MuiButtonBase-root MuiIconButton-root MuiIconButton-edgeEnd"
                                                        data-test="visibility-icon"
                                                        disabled={false}
                                                        onBlur={[Function]}
                                                        onClick={[Function]}
                                                        onDragLeave={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        onKeyUp={[Function]}
                                                        onMouseDown={[Function]}
                                                        onMouseLeave={[Function]}
                                                        onMouseUp={[Function]}
                                                        onTouchEnd={[Function]}
                                                        onTouchMove={[Function]}
                                                        onTouchStart={[Function]}
                                                        tabIndex={0}
                                                        type="button"
                                                      >
                                                        <span
                                                          className="MuiIconButton-label"
                                                        >
                                                          <ForwardRef>
                                                            <WithStyles(ForwardRef(SvgIcon))>
                                                              <ForwardRef(SvgIcon)
                                                                classes={
                                                                  Object {
                                                                    "colorAction": "MuiSvgIcon-colorAction",
                                                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                                    "colorError": "MuiSvgIcon-colorError",
                                                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                                    "root": "MuiSvgIcon-root",
                                                                  }
                                                                }
                                                              >
                                                                <svg
                                                                  aria-hidden={true}
                                                                  className="MuiSvgIcon-root"
                                                                  focusable="false"
                                                                  viewBox="0 0 24 24"
                                                                >
                                                                  <path
                                                                    d="M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z"
                                                                  />
                                                                </svg>
                                                              </ForwardRef(SvgIcon)>
                                                            </WithStyles(ForwardRef(SvgIcon))>
                                                          </ForwardRef>
                                                        </span>
                                                        <WithStyles(memo)
                                                          center={true}
                                                        >
                                                          <ForwardRef(TouchRipple)
                                                            center={true}
                                                            classes={
                                                              Object {
                                                                "child": "MuiTouchRipple-child",
                                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                                "ripple": "MuiTouchRipple-ripple",
                                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                "root": "MuiTouchRipple-root",
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              className="MuiTouchRipple-root"
                                                            />
                                                          </ForwardRef(TouchRipple)>
                                                        </WithStyles(memo)>
                                                      </button>
                                                    </ForwardRef(ButtonBase)>
                                                  </WithStyles(ForwardRef(ButtonBase))>
                                                </ForwardRef(IconButton)>
                                              </WithStyles(ForwardRef(IconButton))>
                                            </div>
                                          </ForwardRef(InputAdornment)>
                                        </WithStyles(ForwardRef(InputAdornment))>
                                      </div>
                                    </ForwardRef(InputBase)>
                                  </WithStyles(ForwardRef(InputBase))>
                                </ForwardRef(Input)>
                              </WithStyles(ForwardRef(Input))>
                            </div>
                          </ForwardRef(FormControl)>
                        </WithStyles(ForwardRef(FormControl))>
                      </ForwardRef(TextField)>
                    </WithStyles(ForwardRef(TextField))>
                    <WithStyles(ForwardRef(FormControlLabel))
                      control={
                        <ForwardRef(WithStyles)
                          checked={false}
                          color="primary"
                          data-test="rememberMe"
                          onChange={[Function]}
                          value="remember"
                        />
                      }
                      label="Lembre-me"
                    >
                      <ForwardRef(FormControlLabel)
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "label": "MuiFormControlLabel-label",
                            "labelPlacementBottom": "MuiFormControlLabel-labelPlacementBottom",
                            "labelPlacementStart": "MuiFormControlLabel-labelPlacementStart",
                            "labelPlacementTop": "MuiFormControlLabel-labelPlacementTop",
                            "root": "MuiFormControlLabel-root",
                          }
                        }
                        control={
                          <ForwardRef(WithStyles)
                            checked={false}
                            color="primary"
                            data-test="rememberMe"
                            onChange={[Function]}
                            value="remember"
                          />
                        }
                        label="Lembre-me"
                      >
                        <label
                          className="MuiFormControlLabel-root"
                        >
                          <WithStyles(ForwardRef(Checkbox))
                            checked={false}
                            color="primary"
                            data-test="rememberMe"
                            onChange={[Function]}
                            value="remember"
                          >
                            <ForwardRef(Checkbox)
                              checked={false}
                              classes={
                                Object {
                                  "checked": "Mui-checked",
                                  "colorPrimary": "MuiCheckbox-colorPrimary",
                                  "colorSecondary": "MuiCheckbox-colorSecondary",
                                  "disabled": "Mui-disabled",
                                  "indeterminate": "MuiCheckbox-indeterminate",
                                  "root": "MuiCheckbox-root",
                                }
                              }
                              color="primary"
                              data-test="rememberMe"
                              onChange={[Function]}
                              value="remember"
                            >
                              <WithStyles(ForwardRef(SwitchBase))
                                checked={false}
                                checkedIcon={
                                  <UNDEFINED
                                    fontSize="default"
                                  />
                                }
                                classes={
                                  Object {
                                    "checked": "Mui-checked",
                                    "disabled": "Mui-disabled",
                                    "root": "MuiCheckbox-root MuiCheckbox-colorPrimary",
                                  }
                                }
                                color="primary"
                                data-test="rememberMe"
                                icon={
                                  <UNDEFINED
                                    fontSize="default"
                                  />
                                }
                                inputProps={
                                  Object {
                                    "data-indeterminate": false,
                                  }
                                }
                                onChange={[Function]}
                                type="checkbox"
                                value="remember"
                              >
                                <ForwardRef(SwitchBase)
                                  checked={false}
                                  checkedIcon={
                                    <UNDEFINED
                                      fontSize="default"
                                    />
                                  }
                                  classes={
                                    Object {
                                      "checked": "PrivateSwitchBase-checked-254 Mui-checked",
                                      "disabled": "PrivateSwitchBase-disabled-255 Mui-disabled",
                                      "input": "PrivateSwitchBase-input-256",
                                      "root": "PrivateSwitchBase-root-253 MuiCheckbox-root MuiCheckbox-colorPrimary",
                                    }
                                  }
                                  color="primary"
                                  data-test="rememberMe"
                                  icon={
                                    <UNDEFINED
                                      fontSize="default"
                                    />
                                  }
                                  inputProps={
                                    Object {
                                      "data-indeterminate": false,
                                    }
                                  }
                                  onChange={[Function]}
                                  type="checkbox"
                                  value="remember"
                                >
                                  <WithStyles(ForwardRef(IconButton))
                                    className="PrivateSwitchBase-root-253 MuiCheckbox-root MuiCheckbox-colorPrimary"
                                    color="primary"
                                    component="span"
                                    data-test="rememberMe"
                                    onBlur={[Function]}
                                    onFocus={[Function]}
                                    tabIndex={null}
                                  >
                                    <ForwardRef(IconButton)
                                      className="PrivateSwitchBase-root-253 MuiCheckbox-root MuiCheckbox-colorPrimary"
                                      classes={
                                        Object {
                                          "colorInherit": "MuiIconButton-colorInherit",
                                          "colorPrimary": "MuiIconButton-colorPrimary",
                                          "colorSecondary": "MuiIconButton-colorSecondary",
                                          "disabled": "Mui-disabled",
                                          "edgeEnd": "MuiIconButton-edgeEnd",
                                          "edgeStart": "MuiIconButton-edgeStart",
                                          "label": "MuiIconButton-label",
                                          "root": "MuiIconButton-root",
                                          "sizeSmall": "MuiIconButton-sizeSmall",
                                        }
                                      }
                                      color="primary"
                                      component="span"
                                      data-test="rememberMe"
                                      onBlur={[Function]}
                                      onFocus={[Function]}
                                      tabIndex={null}
                                    >
                                      <WithStyles(ForwardRef(ButtonBase))
                                        centerRipple={true}
                                        className="MuiIconButton-root PrivateSwitchBase-root-253 MuiCheckbox-root MuiCheckbox-colorPrimary MuiIconButton-colorPrimary"
                                        component="span"
                                        data-test="rememberMe"
                                        disabled={false}
                                        focusRipple={true}
                                        onBlur={[Function]}
                                        onFocus={[Function]}
                                        tabIndex={null}
                                      >
                                        <ForwardRef(ButtonBase)
                                          centerRipple={true}
                                          className="MuiIconButton-root PrivateSwitchBase-root-253 MuiCheckbox-root MuiCheckbox-colorPrimary MuiIconButton-colorPrimary"
                                          classes={
                                            Object {
                                              "disabled": "Mui-disabled",
                                              "focusVisible": "Mui-focusVisible",
                                              "root": "MuiButtonBase-root",
                                            }
                                          }
                                          component="span"
                                          data-test="rememberMe"
                                          disabled={false}
                                          focusRipple={true}
                                          onBlur={[Function]}
                                          onFocus={[Function]}
                                          tabIndex={null}
                                        >
                                          <span
                                            aria-disabled={false}
                                            className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-253 MuiCheckbox-root MuiCheckbox-colorPrimary MuiIconButton-colorPrimary"
                                            data-test="rememberMe"
                                            onBlur={[Function]}
                                            onDragLeave={[Function]}
                                            onFocus={[Function]}
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            onMouseDown={[Function]}
                                            onMouseLeave={[Function]}
                                            onMouseUp={[Function]}
                                            onTouchEnd={[Function]}
                                            onTouchMove={[Function]}
                                            onTouchStart={[Function]}
                                            tabIndex={null}
                                          >
                                            <span
                                              className="MuiIconButton-label"
                                            >
                                              <input
                                                checked={false}
                                                className="PrivateSwitchBase-input-256"
                                                data-indeterminate={false}
                                                onChange={[Function]}
                                                type="checkbox"
                                                value="remember"
                                              />
                                              <ForwardRef
                                                fontSize="default"
                                              >
                                                <WithStyles(ForwardRef(SvgIcon))
                                                  fontSize="default"
                                                >
                                                  <ForwardRef(SvgIcon)
                                                    classes={
                                                      Object {
                                                        "colorAction": "MuiSvgIcon-colorAction",
                                                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                        "colorError": "MuiSvgIcon-colorError",
                                                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                        "root": "MuiSvgIcon-root",
                                                      }
                                                    }
                                                    fontSize="default"
                                                  >
                                                    <svg
                                                      aria-hidden={true}
                                                      className="MuiSvgIcon-root"
                                                      focusable="false"
                                                      viewBox="0 0 24 24"
                                                    >
                                                      <path
                                                        d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
                                                      />
                                                    </svg>
                                                  </ForwardRef(SvgIcon)>
                                                </WithStyles(ForwardRef(SvgIcon))>
                                              </ForwardRef>
                                            </span>
                                            <WithStyles(memo)
                                              center={true}
                                            >
                                              <ForwardRef(TouchRipple)
                                                center={true}
                                                classes={
                                                  Object {
                                                    "child": "MuiTouchRipple-child",
                                                    "childLeaving": "MuiTouchRipple-childLeaving",
                                                    "childPulsate": "MuiTouchRipple-childPulsate",
                                                    "ripple": "MuiTouchRipple-ripple",
                                                    "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                    "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                    "root": "MuiTouchRipple-root",
                                                  }
                                                }
                                              >
                                                <span
                                                  className="MuiTouchRipple-root"
                                                />
                                              </ForwardRef(TouchRipple)>
                                            </WithStyles(memo)>
                                          </span>
                                        </ForwardRef(ButtonBase)>
                                      </WithStyles(ForwardRef(ButtonBase))>
                                    </ForwardRef(IconButton)>
                                  </WithStyles(ForwardRef(IconButton))>
                                </ForwardRef(SwitchBase)>
                              </WithStyles(ForwardRef(SwitchBase))>
                            </ForwardRef(Checkbox)>
                          </WithStyles(ForwardRef(Checkbox))>
                          <WithStyles(ForwardRef(Typography))
                            className="MuiFormControlLabel-label"
                            component="span"
                          >
                            <ForwardRef(Typography)
                              className="MuiFormControlLabel-label"
                              classes={
                                Object {
                                  "alignCenter": "MuiTypography-alignCenter",
                                  "alignJustify": "MuiTypography-alignJustify",
                                  "alignLeft": "MuiTypography-alignLeft",
                                  "alignRight": "MuiTypography-alignRight",
                                  "body1": "MuiTypography-body1",
                                  "body2": "MuiTypography-body2",
                                  "button": "MuiTypography-button",
                                  "caption": "MuiTypography-caption",
                                  "colorError": "MuiTypography-colorError",
                                  "colorInherit": "MuiTypography-colorInherit",
                                  "colorPrimary": "MuiTypography-colorPrimary",
                                  "colorSecondary": "MuiTypography-colorSecondary",
                                  "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                  "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                  "displayBlock": "MuiTypography-displayBlock",
                                  "displayInline": "MuiTypography-displayInline",
                                  "gutterBottom": "MuiTypography-gutterBottom",
                                  "h1": "MuiTypography-h1",
                                  "h2": "MuiTypography-h2",
                                  "h3": "MuiTypography-h3",
                                  "h4": "MuiTypography-h4",
                                  "h5": "MuiTypography-h5",
                                  "h6": "MuiTypography-h6",
                                  "noWrap": "MuiTypography-noWrap",
                                  "overline": "MuiTypography-overline",
                                  "paragraph": "MuiTypography-paragraph",
                                  "root": "MuiTypography-root",
                                  "srOnly": "MuiTypography-srOnly",
                                  "subtitle1": "MuiTypography-subtitle1",
                                  "subtitle2": "MuiTypography-subtitle2",
                                }
                              }
                              component="span"
                            >
                              <span
                                className="MuiTypography-root MuiFormControlLabel-label MuiTypography-body1"
                              >
                                Lembre-me
                              </span>
                            </ForwardRef(Typography)>
                          </WithStyles(ForwardRef(Typography))>
                        </label>
                      </ForwardRef(FormControlLabel)>
                    </WithStyles(ForwardRef(FormControlLabel))>
                    <WithStyles(ForwardRef(Button))
                      className="makeStyles-submit-1"
                      color="secondary"
                      data-test="submitButton"
                      fullWidth={true}
                      type="submit"
                      variant="contained"
                    >
                      <ForwardRef(Button)
                        className="makeStyles-submit-1"
                        classes={
                          Object {
                            "colorInherit": "MuiButton-colorInherit",
                            "contained": "MuiButton-contained",
                            "containedPrimary": "MuiButton-containedPrimary",
                            "containedSecondary": "MuiButton-containedSecondary",
                            "containedSizeLarge": "MuiButton-containedSizeLarge",
                            "containedSizeSmall": "MuiButton-containedSizeSmall",
                            "disableElevation": "MuiButton-disableElevation",
                            "disabled": "Mui-disabled",
                            "endIcon": "MuiButton-endIcon",
                            "focusVisible": "Mui-focusVisible",
                            "fullWidth": "MuiButton-fullWidth",
                            "iconSizeLarge": "MuiButton-iconSizeLarge",
                            "iconSizeMedium": "MuiButton-iconSizeMedium",
                            "iconSizeSmall": "MuiButton-iconSizeSmall",
                            "label": "MuiButton-label",
                            "outlined": "MuiButton-outlined",
                            "outlinedPrimary": "MuiButton-outlinedPrimary",
                            "outlinedSecondary": "MuiButton-outlinedSecondary",
                            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                            "root": "MuiButton-root",
                            "sizeLarge": "MuiButton-sizeLarge",
                            "sizeSmall": "MuiButton-sizeSmall",
                            "startIcon": "MuiButton-startIcon",
                            "text": "MuiButton-text",
                            "textPrimary": "MuiButton-textPrimary",
                            "textSecondary": "MuiButton-textSecondary",
                            "textSizeLarge": "MuiButton-textSizeLarge",
                            "textSizeSmall": "MuiButton-textSizeSmall",
                          }
                        }
                        color="secondary"
                        data-test="submitButton"
                        fullWidth={true}
                        type="submit"
                        variant="contained"
                      >
                        <WithStyles(ForwardRef(ButtonBase))
                          className="MuiButton-root MuiButton-contained makeStyles-submit-1 MuiButton-containedSecondary MuiButton-fullWidth"
                          component="button"
                          data-test="submitButton"
                          disabled={false}
                          focusRipple={true}
                          focusVisibleClassName="Mui-focusVisible"
                          type="submit"
                        >
                          <ForwardRef(ButtonBase)
                            className="MuiButton-root MuiButton-contained makeStyles-submit-1 MuiButton-containedSecondary MuiButton-fullWidth"
                            classes={
                              Object {
                                "disabled": "Mui-disabled",
                                "focusVisible": "Mui-focusVisible",
                                "root": "MuiButtonBase-root",
                              }
                            }
                            component="button"
                            data-test="submitButton"
                            disabled={false}
                            focusRipple={true}
                            focusVisibleClassName="Mui-focusVisible"
                            type="submit"
                          >
                            <button
                              className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-submit-1 MuiButton-containedSecondary MuiButton-fullWidth"
                              data-test="submitButton"
                              disabled={false}
                              onBlur={[Function]}
                              onDragLeave={[Function]}
                              onFocus={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              onMouseDown={[Function]}
                              onMouseLeave={[Function]}
                              onMouseUp={[Function]}
                              onTouchEnd={[Function]}
                              onTouchMove={[Function]}
                              onTouchStart={[Function]}
                              tabIndex={0}
                              type="submit"
                            >
                              <span
                                className="MuiButton-label"
                              >
                                Entrar
                              </span>
                              <WithStyles(memo)
                                center={false}
                              >
                                <ForwardRef(TouchRipple)
                                  center={false}
                                  classes={
                                    Object {
                                      "child": "MuiTouchRipple-child",
                                      "childLeaving": "MuiTouchRipple-childLeaving",
                                      "childPulsate": "MuiTouchRipple-childPulsate",
                                      "ripple": "MuiTouchRipple-ripple",
                                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                                      "root": "MuiTouchRipple-root",
                                    }
                                  }
                                >
                                  <span
                                    className="MuiTouchRipple-root"
                                  />
                                </ForwardRef(TouchRipple)>
                              </WithStyles(memo)>
                            </button>
                          </ForwardRef(ButtonBase)>
                        </WithStyles(ForwardRef(ButtonBase))>
                      </ForwardRef(Button)>
                    </WithStyles(ForwardRef(Button))>
                    <WithStyles(ForwardRef(Grid))
                      container={true}
                      justify="flex-end"
                    >
                      <ForwardRef(Grid)
                        classes={
                          Object {
                            "align-content-xs-center": "MuiGrid-align-content-xs-center",
                            "align-content-xs-flex-end": "MuiGrid-align-content-xs-flex-end",
                            "align-content-xs-flex-start": "MuiGrid-align-content-xs-flex-start",
                            "align-content-xs-space-around": "MuiGrid-align-content-xs-space-around",
                            "align-content-xs-space-between": "MuiGrid-align-content-xs-space-between",
                            "align-items-xs-baseline": "MuiGrid-align-items-xs-baseline",
                            "align-items-xs-center": "MuiGrid-align-items-xs-center",
                            "align-items-xs-flex-end": "MuiGrid-align-items-xs-flex-end",
                            "align-items-xs-flex-start": "MuiGrid-align-items-xs-flex-start",
                            "container": "MuiGrid-container",
                            "direction-xs-column": "MuiGrid-direction-xs-column",
                            "direction-xs-column-reverse": "MuiGrid-direction-xs-column-reverse",
                            "direction-xs-row-reverse": "MuiGrid-direction-xs-row-reverse",
                            "grid-lg-1": "MuiGrid-grid-lg-1",
                            "grid-lg-10": "MuiGrid-grid-lg-10",
                            "grid-lg-11": "MuiGrid-grid-lg-11",
                            "grid-lg-12": "MuiGrid-grid-lg-12",
                            "grid-lg-2": "MuiGrid-grid-lg-2",
                            "grid-lg-3": "MuiGrid-grid-lg-3",
                            "grid-lg-4": "MuiGrid-grid-lg-4",
                            "grid-lg-5": "MuiGrid-grid-lg-5",
                            "grid-lg-6": "MuiGrid-grid-lg-6",
                            "grid-lg-7": "MuiGrid-grid-lg-7",
                            "grid-lg-8": "MuiGrid-grid-lg-8",
                            "grid-lg-9": "MuiGrid-grid-lg-9",
                            "grid-lg-auto": "MuiGrid-grid-lg-auto",
                            "grid-lg-true": "MuiGrid-grid-lg-true",
                            "grid-md-1": "MuiGrid-grid-md-1",
                            "grid-md-10": "MuiGrid-grid-md-10",
                            "grid-md-11": "MuiGrid-grid-md-11",
                            "grid-md-12": "MuiGrid-grid-md-12",
                            "grid-md-2": "MuiGrid-grid-md-2",
                            "grid-md-3": "MuiGrid-grid-md-3",
                            "grid-md-4": "MuiGrid-grid-md-4",
                            "grid-md-5": "MuiGrid-grid-md-5",
                            "grid-md-6": "MuiGrid-grid-md-6",
                            "grid-md-7": "MuiGrid-grid-md-7",
                            "grid-md-8": "MuiGrid-grid-md-8",
                            "grid-md-9": "MuiGrid-grid-md-9",
                            "grid-md-auto": "MuiGrid-grid-md-auto",
                            "grid-md-true": "MuiGrid-grid-md-true",
                            "grid-sm-1": "MuiGrid-grid-sm-1",
                            "grid-sm-10": "MuiGrid-grid-sm-10",
                            "grid-sm-11": "MuiGrid-grid-sm-11",
                            "grid-sm-12": "MuiGrid-grid-sm-12",
                            "grid-sm-2": "MuiGrid-grid-sm-2",
                            "grid-sm-3": "MuiGrid-grid-sm-3",
                            "grid-sm-4": "MuiGrid-grid-sm-4",
                            "grid-sm-5": "MuiGrid-grid-sm-5",
                            "grid-sm-6": "MuiGrid-grid-sm-6",
                            "grid-sm-7": "MuiGrid-grid-sm-7",
                            "grid-sm-8": "MuiGrid-grid-sm-8",
                            "grid-sm-9": "MuiGrid-grid-sm-9",
                            "grid-sm-auto": "MuiGrid-grid-sm-auto",
                            "grid-sm-true": "MuiGrid-grid-sm-true",
                            "grid-xl-1": "MuiGrid-grid-xl-1",
                            "grid-xl-10": "MuiGrid-grid-xl-10",
                            "grid-xl-11": "MuiGrid-grid-xl-11",
                            "grid-xl-12": "MuiGrid-grid-xl-12",
                            "grid-xl-2": "MuiGrid-grid-xl-2",
                            "grid-xl-3": "MuiGrid-grid-xl-3",
                            "grid-xl-4": "MuiGrid-grid-xl-4",
                            "grid-xl-5": "MuiGrid-grid-xl-5",
                            "grid-xl-6": "MuiGrid-grid-xl-6",
                            "grid-xl-7": "MuiGrid-grid-xl-7",
                            "grid-xl-8": "MuiGrid-grid-xl-8",
                            "grid-xl-9": "MuiGrid-grid-xl-9",
                            "grid-xl-auto": "MuiGrid-grid-xl-auto",
                            "grid-xl-true": "MuiGrid-grid-xl-true",
                            "grid-xs-1": "MuiGrid-grid-xs-1",
                            "grid-xs-10": "MuiGrid-grid-xs-10",
                            "grid-xs-11": "MuiGrid-grid-xs-11",
                            "grid-xs-12": "MuiGrid-grid-xs-12",
                            "grid-xs-2": "MuiGrid-grid-xs-2",
                            "grid-xs-3": "MuiGrid-grid-xs-3",
                            "grid-xs-4": "MuiGrid-grid-xs-4",
                            "grid-xs-5": "MuiGrid-grid-xs-5",
                            "grid-xs-6": "MuiGrid-grid-xs-6",
                            "grid-xs-7": "MuiGrid-grid-xs-7",
                            "grid-xs-8": "MuiGrid-grid-xs-8",
                            "grid-xs-9": "MuiGrid-grid-xs-9",
                            "grid-xs-auto": "MuiGrid-grid-xs-auto",
                            "grid-xs-true": "MuiGrid-grid-xs-true",
                            "item": "MuiGrid-item",
                            "justify-xs-center": "MuiGrid-justify-xs-center",
                            "justify-xs-flex-end": "MuiGrid-justify-xs-flex-end",
                            "justify-xs-space-around": "MuiGrid-justify-xs-space-around",
                            "justify-xs-space-between": "MuiGrid-justify-xs-space-between",
                            "justify-xs-space-evenly": "MuiGrid-justify-xs-space-evenly",
                            "root": "MuiGrid-root",
                            "spacing-xs-1": "MuiGrid-spacing-xs-1",
                            "spacing-xs-10": "MuiGrid-spacing-xs-10",
                            "spacing-xs-2": "MuiGrid-spacing-xs-2",
                            "spacing-xs-3": "MuiGrid-spacing-xs-3",
                            "spacing-xs-4": "MuiGrid-spacing-xs-4",
                            "spacing-xs-5": "MuiGrid-spacing-xs-5",
                            "spacing-xs-6": "MuiGrid-spacing-xs-6",
                            "spacing-xs-7": "MuiGrid-spacing-xs-7",
                            "spacing-xs-8": "MuiGrid-spacing-xs-8",
                            "spacing-xs-9": "MuiGrid-spacing-xs-9",
                            "wrap-xs-nowrap": "MuiGrid-wrap-xs-nowrap",
                            "wrap-xs-wrap-reverse": "MuiGrid-wrap-xs-wrap-reverse",
                            "zeroMinWidth": "MuiGrid-zeroMinWidth",
                          }
                        }
                        container={true}
                        justify="flex-end"
                      >
                        <div
                          className="MuiGrid-root MuiGrid-container MuiGrid-justify-xs-flex-end"
                        >
                          <WithStyles(ForwardRef(Link))
                            data-test="registerLink"
                            href="/register"
                            variant="body2"
                          >
                            <ForwardRef(Link)
                              classes={
                                Object {
                                  "button": "MuiLink-button",
                                  "focusVisible": "Mui-focusVisible",
                                  "root": "MuiLink-root",
                                  "underlineAlways": "MuiLink-underlineAlways",
                                  "underlineHover": "MuiLink-underlineHover",
                                  "underlineNone": "MuiLink-underlineNone",
                                }
                              }
                              data-test="registerLink"
                              href="/register"
                              variant="body2"
                            >
                              <WithStyles(ForwardRef(Typography))
                                className="MuiLink-root MuiLink-underlineHover"
                                color="primary"
                                component="a"
                                data-test="registerLink"
                                href="/register"
                                onBlur={[Function]}
                                onFocus={[Function]}
                                variant="body2"
                              >
                                <ForwardRef(Typography)
                                  className="MuiLink-root MuiLink-underlineHover"
                                  classes={
                                    Object {
                                      "alignCenter": "MuiTypography-alignCenter",
                                      "alignJustify": "MuiTypography-alignJustify",
                                      "alignLeft": "MuiTypography-alignLeft",
                                      "alignRight": "MuiTypography-alignRight",
                                      "body1": "MuiTypography-body1",
                                      "body2": "MuiTypography-body2",
                                      "button": "MuiTypography-button",
                                      "caption": "MuiTypography-caption",
                                      "colorError": "MuiTypography-colorError",
                                      "colorInherit": "MuiTypography-colorInherit",
                                      "colorPrimary": "MuiTypography-colorPrimary",
                                      "colorSecondary": "MuiTypography-colorSecondary",
                                      "colorTextPrimary": "MuiTypography-colorTextPrimary",
                                      "colorTextSecondary": "MuiTypography-colorTextSecondary",
                                      "displayBlock": "MuiTypography-displayBlock",
                                      "displayInline": "MuiTypography-displayInline",
                                      "gutterBottom": "MuiTypography-gutterBottom",
                                      "h1": "MuiTypography-h1",
                                      "h2": "MuiTypography-h2",
                                      "h3": "MuiTypography-h3",
                                      "h4": "MuiTypography-h4",
                                      "h5": "MuiTypography-h5",
                                      "h6": "MuiTypography-h6",
                                      "noWrap": "MuiTypography-noWrap",
                                      "overline": "MuiTypography-overline",
                                      "paragraph": "MuiTypography-paragraph",
                                      "root": "MuiTypography-root",
                                      "srOnly": "MuiTypography-srOnly",
                                      "subtitle1": "MuiTypography-subtitle1",
                                      "subtitle2": "MuiTypography-subtitle2",
                                    }
                                  }
                                  color="primary"
                                  component="a"
                                  data-test="registerLink"
                                  href="/register"
                                  onBlur={[Function]}
                                  onFocus={[Function]}
                                  variant="body2"
                                >
                                  <a
                                    className="MuiTypography-root MuiLink-root MuiLink-underlineHover MuiTypography-body2 MuiTypography-colorPrimary"
                                    data-test="registerLink"
                                    href="/register"
                                    onBlur={[Function]}
                                    onFocus={[Function]}
                                  >
                                    Registre-se
                                  </a>
                                </ForwardRef(Typography)>
                              </WithStyles(ForwardRef(Typography))>
                            </ForwardRef(Link)>
                          </WithStyles(ForwardRef(Link))>
                        </div>
                      </ForwardRef(Grid)>
                    </WithStyles(ForwardRef(Grid))>
                  </form>
                </div>
              </ForwardRef(Container)>
            </WithStyles(ForwardRef(Container))>
          </div>
        </ForwardRef(Grid)>
      </WithStyles(ForwardRef(Grid))>
    </div>
  </ForwardRef(Grid)>
</WithStyles(ForwardRef(Grid))>
`;
